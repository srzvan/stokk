{"version":3,"sources":["components/Search.tsx","components/Header.tsx","utils/stock-api-types.ts","utils/daily-stock-time-series.ts","components/StockChart.tsx","components/FilterStockTimeSeries.tsx","components/StockTimeSeriesLoader.tsx","components/StockTimeSeries.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["SuggestionKeys","Search","props","query","setQuery","closeModal","setShouldFetchDailyStockTimeSeries","React","suggestions","setSuggestions","typingTimeout","setTypingTimeout","isLoading","setIsLoading","isStockSymbolSet","setIsStockSymbolSet","event","a","preventDefault","apiKey","process","REACT_APP_ALPHA_VANTAGE_API_KEY","fetch","toLowerCase","response","json","responseData","normalizeSuggestions","console","error","bestMatches","map","suggestion","SYMBOL","NAME","form","onSubmit","autoComplete","flex","position","zIndex","theme","zIndices","dropdown","spacing","mb","ref","inputRef","name","type","placeholder","required","onChange","clearTimeout","target","value","setTimeout","fetchSuggestions","variant","length","alignItems","maxHeight","overflowY","w","initialScale","in","index","as","onClick","split","borderBottom","cursor","_hover","borderBottomColor","colors","gray","disabled","Header","DailyStockTimeSeriesItemValuesKeys","StockAPIResponseKeys","NormalizedTimeSeriesItemValuesKeys","searchInputRef","useDisclosure","isOpen","onOpen","onClose","onToggle","p","fontSize","direction","size","borderTopRightRadius","borderBottomRightRadius","display","colorScheme","lineHeight","marginLeft","borderTopLeftRadius","borderBottomLeftRadius","marginRight","rightIcon","motionPreset","initialFocusRef","normalizeStockData","stockAPIResponse","timeSeries","Object","entries","TIME_SERIES_DAILY","timeSeriesItem","high","Number","parseFloat","HIGH","low","LOW","average","toFixed","date","values","sort","timeSeriesItem1","timeSeriesItem2","Error","getDate","dataPoint","Date","getStockHighValue","getStockAverageValue","bisectDate","bisector","left","formatDate","timeFormat","styles","light","dark","darker","tooltipHighStyles","defaultStyles","background","border","color","tooltipAverageStyles","orange","StockChart","stockTimeSeries","showAverage","width","height","margin","useTooltip","showTooltip","hideTooltip","tooltipData","tooltipLeft","tooltipTop","xMax","right","yMax","top","bottom","dateScale","scaleTime","range","domain","extent","stockValueScale","scaleLinear","max","nice","handleTooltip","x","localPoint","x0","invert","d0","d1","d","valueOf","y","fill","rx","LinearGradient","id","from","to","toOpacity","GridRows","scale","strokeDasharray","stroke","strokeOpacity","pointerEvents","GridColumns","AreaClosed","data","yScale","strokeWidth","curve","curveMonotoneX","LinePath","Bar","onMouseMove","onMouseLeave","Line","cx","cy","r","fillOpacity","Tooltip","style","minWidth","textAlign","transform","ChakraDateRange","chakra","DateRange","FilterStockTimeSeries","setFilterInterval","setShowAverage","minDate","maxDate","key","startDate","undefined","endDate","dateRange","setDateRange","gridColumn","startDatePlaceholder","endDatePlaceholder","ranges","moveRangeOnFirstSelection","weekStartsOn","dateDisplayFormat","item","selection","htmlFor","checked","start","end","StockTimeSeriesLoader","gridRow","justifySelf","alignSelf","isIndeterminate","teal","StockTimeSeries","shouldFetchDailyStockTimeSeries","fullStockTimeSeries","setFullStockTimeSeries","filtered","setFiltered","filterInterval","setMinDate","setMaxDate","normalizedData","min","fetchDailyStockTimeSeries","filteredTimeSeries","startStringDate","toISOString","endStringDate","filter","filterTimeSeries","justifyContent","extendTheme","initialColorMode","global","App","h","templateRows","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.712dc70e.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  chakra,\r\n  FormControl,\r\n  FormHelperText,\r\n  Input,\r\n  ScaleFade,\r\n  Stack,\r\n  theme,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\n\r\nenum SuggestionKeys {\r\n  SYMBOL = \"1. symbol\",\r\n  NAME = \"2. name\",\r\n}\r\n\r\ntype Suggestion = {\r\n  [key in SuggestionKeys]: string;\r\n};\r\n\r\ntype Suggestions = {\r\n  bestMatches: Suggestion[];\r\n};\r\n\r\ntype SearchProps = {\r\n  query: string;\r\n  setQuery: (newQuery: string) => void;\r\n  closeModal: () => void;\r\n  inputRef: React.Ref<HTMLInputElement>;\r\n  setShouldFetchDailyStockTimeSeries: (shouldFetchDailyStockTimeSeries: boolean) => void;\r\n};\r\n\r\nfunction Search(props: SearchProps) {\r\n  const { query, setQuery, closeModal, setShouldFetchDailyStockTimeSeries } = props;\r\n\r\n  const [suggestions, setSuggestions] = React.useState<string[]>();\r\n  const [typingTimeout, setTypingTimeout] = React.useState<NodeJS.Timeout>();\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isStockSymbolSet, setIsStockSymbolSet] = React.useState(false);\r\n\r\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    if (typingTimeout) {\r\n      clearTimeout(typingTimeout);\r\n    }\r\n\r\n    setQuery(event.target.value);\r\n    setIsStockSymbolSet(false);\r\n    setTypingTimeout(setTimeout(() => fetchSuggestions(), 500));\r\n  }\r\n\r\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    setShouldFetchDailyStockTimeSeries(true);\r\n    closeModal();\r\n  }\r\n\r\n  async function fetchSuggestions() {\r\n    try {\r\n      if (query !== \"\") {\r\n        setIsLoading(true);\r\n\r\n        const apiKey = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY;\r\n        let response = await fetch(\r\n          `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${query.toLowerCase()}&apikey=${apiKey}`\r\n        );\r\n        let responseData = await response.json();\r\n\r\n        setSuggestions(normalizeSuggestions(responseData));\r\n        setIsLoading(false);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  function normalizeSuggestions(suggestions: Suggestions) {\r\n    return suggestions.bestMatches.map(keepOnlyCompanyAndSymbolName);\r\n\r\n    /* ************************************ */\r\n    function keepOnlyCompanyAndSymbolName(suggestion: Suggestion) {\r\n      return `${suggestion[SuggestionKeys.SYMBOL]} - ${suggestion[SuggestionKeys.NAME]}`;\r\n    }\r\n  }\r\n\r\n  function renderSuggestions() {\r\n    if (query !== \"\" && suggestions && suggestions?.length > 0) {\r\n      return (\r\n        <VStack alignItems=\"start\" maxHeight=\"10em\" overflowY=\"auto\">\r\n          <Box w=\"100%\">\r\n            <ScaleFade initialScale={0.9} in={suggestions.length > 0}>\r\n              {suggestions?.map(renderSuggestion)}\r\n            </ScaleFade>\r\n          </Box>\r\n        </VStack>\r\n      );\r\n    }\r\n\r\n    return null;\r\n\r\n    /* ******************************** */\r\n    function renderSuggestion(suggestion: string, index: number) {\r\n      return (\r\n        <Box\r\n          as=\"p\"\r\n          onClick={() => {\r\n            setIsStockSymbolSet(true);\r\n            setQuery(suggestion.split(\" - \")[0]);\r\n          }}\r\n          key={index}\r\n          borderBottom=\"1px solid transparent\"\r\n          cursor=\"pointer\"\r\n          _hover={{ borderBottomColor: theme.colors.gray[100] }}\r\n        >\r\n          {suggestion}\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <chakra.form\r\n      onSubmit={handleSubmit}\r\n      autoComplete=\"off\"\r\n      flex=\"0 0 25%\"\r\n      position=\"relative\"\r\n      zIndex={theme.zIndices.dropdown}\r\n    >\r\n      <Stack spacing={3}>\r\n        <Stack spacing={0}>\r\n          <FormControl mb={2}>\r\n            <Input\r\n              ref={props.inputRef}\r\n              name=\"query\"\r\n              type=\"text\"\r\n              placeholder=\"e.g. GOOGL/Google\"\r\n              required\r\n              onChange={handleChange}\r\n              value={query}\r\n              variant=\"flushed\"\r\n            />\r\n            <FormHelperText>\r\n              Type the name of a stock symbol/company &amp; click on any of the suggestions\r\n            </FormHelperText>\r\n          </FormControl>\r\n          {renderSuggestions()}\r\n        </Stack>\r\n        <Button type=\"submit\" disabled={!isStockSymbolSet} isLoading={isLoading}>\r\n          Load stock data for selected company\r\n        </Button>\r\n      </Stack>\r\n    </chakra.form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import * as React from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Heading,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { FaArrowDown, FaArrowUp, FaSearch } from \"react-icons/fa\";\r\n\r\nimport Search from \"./Search\";\r\n\r\ntype HeaderProps = {\r\n  query: string;\r\n  setQuery: (newQuery: string) => void;\r\n  setShouldFetchDailyStockTimeSeries: (shouldFetchDailyStockTimeSeries: boolean) => void;\r\n};\r\n\r\nfunction Header(props: HeaderProps) {\r\n  const { query, setQuery, setShouldFetchDailyStockTimeSeries } = props;\r\n\r\n  const searchInputRef = React.useRef(null);\r\n\r\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure();\r\n  return (\r\n    <Flex as=\"header\" p={5} fontSize=\"2xl\" direction=\"column\" alignItems=\"center\">\r\n      <Heading as=\"h1\" size=\"lg\" mb={4}>\r\n        <Badge\r\n          borderTopRightRadius={0}\r\n          borderBottomRightRadius={0}\r\n          display=\"inline-flex\"\r\n          alignItems=\"center\"\r\n          colorScheme=\"red\"\r\n          fontSize=\"inherit\"\r\n          lineHeight=\"short\"\r\n        >\r\n          <FaArrowDown />\r\n          <Box as=\"span\" marginLeft=\"2\">\r\n            st\r\n          </Box>\r\n        </Badge>\r\n        <Badge\r\n          borderTopLeftRadius={0}\r\n          borderBottomLeftRadius={0}\r\n          display=\"inline-flex\"\r\n          alignItems=\"center\"\r\n          colorScheme=\"green\"\r\n          fontSize=\"inherit\"\r\n          lineHeight=\"short\"\r\n        >\r\n          <Box as=\"span\" marginRight={2}>\r\n            okk\r\n          </Box>\r\n          <FaArrowUp />\r\n        </Badge>\r\n      </Heading>\r\n      <Button variant=\"outline\" size=\"md\" colorScheme=\"blue\" onClick={onOpen} fontSize=\"xl\" rightIcon={<FaSearch />}>\r\n        Search\r\n      </Button>\r\n      <Modal onClose={onClose} size=\"xl\" isOpen={isOpen} motionPreset=\"scale\" initialFocusRef={searchInputRef}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Search for a stock symbol/company name</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Search\r\n              inputRef={searchInputRef}\r\n              query={query}\r\n              setQuery={setQuery}\r\n              closeModal={onToggle}\r\n              setShouldFetchDailyStockTimeSeries={setShouldFetchDailyStockTimeSeries}\r\n            />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export enum DailyStockTimeSeriesItemValuesKeys {\r\n  HIGH = \"2. high\",\r\n  LOW = \"3. low\",\r\n}\r\n\r\nexport type DailyStockTimeSeriesItemValues = {\r\n  [key in DailyStockTimeSeriesItemValuesKeys]: string;\r\n};\r\n\r\nexport enum StockAPIResponseKeys {\r\n  TIME_SERIES_DAILY = \"Time Series (Daily)\",\r\n}\r\n\r\ntype DailyStockTimeSeries = {\r\n  [dateString: string]: DailyStockTimeSeriesItemValues;\r\n};\r\n\r\nexport type StockAPIResponse = {\r\n  [key in StockAPIResponseKeys]: DailyStockTimeSeries;\r\n};\r\n","import { bisector } from \"d3-array\";\r\nimport { timeFormat } from \"d3-time-format\";\r\n\r\nimport {\r\n  DailyStockTimeSeriesItemValues,\r\n  DailyStockTimeSeriesItemValuesKeys,\r\n  StockAPIResponse,\r\n  StockAPIResponseKeys,\r\n} from \"./stock-api-types\";\r\n\r\nenum NormalizedTimeSeriesItemValuesKeys {\r\n  HIGH = \"high\",\r\n  LOW = \"low\",\r\n  AVERAGE = \"average\",\r\n}\r\n\r\ntype NormalizedTimeSeriesItemValues = {\r\n  [key in NormalizedTimeSeriesItemValuesKeys]: number;\r\n};\r\n\r\nexport type NormalizedTimeSeriesItem = { date: string; values: NormalizedTimeSeriesItemValues };\r\n\r\nexport type NormalizedTimeSeries = NormalizedTimeSeriesItem[];\r\n\r\nexport function normalizeStockData(stockAPIResponse: StockAPIResponse): NormalizedTimeSeries {\r\n  var timeSeries = Object.entries(stockAPIResponse[StockAPIResponseKeys.TIME_SERIES_DAILY]);\r\n\r\n  if (timeSeries) {\r\n    return timeSeries\r\n      .map(keepOnlyHighLowAverageValues)\r\n      .sort((timeSeriesItem1, timeSeriesItem2) => (timeSeriesItem1.date > timeSeriesItem2.date ? 1 : -1));\r\n  } else {\r\n    throw new Error(\"There is no data for the selected company 😕\");\r\n  }\r\n\r\n  /* ************************************* */\r\n  function keepOnlyHighLowAverageValues(timeSeriesItem: [string, DailyStockTimeSeriesItemValues]) {\r\n    const high = Number.parseFloat(timeSeriesItem[1][DailyStockTimeSeriesItemValuesKeys.HIGH]);\r\n    const low = Number.parseFloat(timeSeriesItem[1][DailyStockTimeSeriesItemValuesKeys.LOW]);\r\n    const average = +((high + low) / 2).toFixed(3);\r\n\r\n    return {\r\n      date: timeSeriesItem[0],\r\n      values: {\r\n        high,\r\n        low,\r\n        average,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport function filterTimeSeries(timeSeries: NormalizedTimeSeries, filterInterval: { start: Date; end: Date }) {\r\n  const startStringDate = filterInterval.start.toISOString().split(\"T\")[0];\r\n  const endStringDate = filterInterval.end.toISOString().split(\"T\")[0];\r\n\r\n  return timeSeries.filter(\r\n    timeSeriesItem => timeSeriesItem.date >= startStringDate && timeSeriesItem.date <= endStringDate\r\n  );\r\n}\r\n\r\nexport const getDate = (dataPoint: NormalizedTimeSeriesItem) => new Date(dataPoint.date);\r\nexport const getStockHighValue = (dataPoint: NormalizedTimeSeriesItem) => dataPoint.values.high;\r\nexport const getStockAverageValue = (dataPoint: NormalizedTimeSeriesItem) => dataPoint.values.average;\r\nexport const bisectDate = bisector<NormalizedTimeSeriesItem, Date>(dataPoint => new Date(dataPoint.date)).left;\r\nexport const formatDate = timeFormat(\"%b %d, '%y\");\r\n","import * as React from \"react\";\r\nimport { Box, theme } from \"@chakra-ui/react\";\r\nimport { LinearGradient } from \"@visx/gradient\";\r\nimport { scaleTime, scaleLinear } from \"@visx/scale\";\r\nimport { GridRows, GridColumns } from \"@visx/grid\";\r\nimport { AreaClosed, Line, Bar, LinePath } from \"@visx/shape\";\r\nimport { curveMonotoneX } from \"@visx/curve\";\r\nimport { localPoint } from \"@visx/event\";\r\nimport { useTooltip, Tooltip, defaultStyles } from \"@visx/tooltip\";\r\nimport { max, extent } from \"d3-array\";\r\n\r\nimport {\r\n  bisectDate,\r\n  formatDate,\r\n  getDate,\r\n  getStockAverageValue,\r\n  getStockHighValue,\r\n  NormalizedTimeSeries,\r\n  NormalizedTimeSeriesItem,\r\n} from \"../utils/daily-stock-time-series\";\r\n\r\ntype AreaProps = {\r\n  width: number;\r\n  height: number;\r\n  margin?: { top: number; right: number; bottom: number; left: number };\r\n};\r\n\r\ntype StockChartProps = {\r\n  stockTimeSeries: NormalizedTimeSeries;\r\n  showAverage: boolean;\r\n} & AreaProps;\r\n\r\nconst styles = {\r\n  accent: {\r\n    light: \"#edffea\",\r\n    dark: \"#75daad\",\r\n  },\r\n  background: {\r\n    dark: \"#3b6978\",\r\n    darker: \"#204051\",\r\n  },\r\n};\r\n\r\nconst tooltipHighStyles = {\r\n  ...defaultStyles,\r\n  background: styles.background.dark,\r\n  border: \"1px solid white\",\r\n  color: \"white\",\r\n};\r\n\r\nconst tooltipAverageStyles = {\r\n  ...tooltipHighStyles,\r\n  background: theme.colors.orange[500],\r\n};\r\n\r\nfunction StockChart(props: StockChartProps) {\r\n  const { stockTimeSeries, showAverage, width, height, margin } = props;\r\n\r\n  const { showTooltip, hideTooltip, tooltipData, tooltipLeft, tooltipTop } = useTooltip<NormalizedTimeSeriesItem>();\r\n\r\n  const xMax = margin ? width - margin.left - margin.right : width;\r\n  const yMax = margin ? height - margin.top - margin.bottom : height;\r\n\r\n  const dateScale = React.useMemo(\r\n    () =>\r\n      scaleTime({\r\n        range: [0, xMax],\r\n        domain: extent(stockTimeSeries, getDate) as [Date, Date],\r\n      }),\r\n    [xMax, stockTimeSeries]\r\n  );\r\n\r\n  const stockValueScale = React.useMemo(\r\n    () =>\r\n      scaleLinear({\r\n        range: [yMax, 0],\r\n        domain: [0, (max(stockTimeSeries, getStockHighValue) || 0) + yMax / 3],\r\n        nice: true,\r\n      }),\r\n    [yMax, stockTimeSeries]\r\n  );\r\n\r\n  const handleTooltip = React.useCallback(\r\n    (event: React.MouseEvent<SVGRectElement>) => {\r\n      const { x } = localPoint(event) || { x: 0 };\r\n      const x0 = dateScale.invert(x);\r\n      const index = bisectDate(stockTimeSeries, x0, 1);\r\n      const d0 = stockTimeSeries[index - 1];\r\n      const d1 = stockTimeSeries[index];\r\n      let d = d0;\r\n\r\n      if (d1 && getDate(d1)) {\r\n        d = x0.valueOf() - getDate(d0).valueOf() > getDate(d1).valueOf() - x0.valueOf() ? d1 : d0;\r\n      }\r\n\r\n      showTooltip({\r\n        tooltipData: d,\r\n        tooltipLeft: x,\r\n        tooltipTop: stockValueScale(getStockHighValue(d)),\r\n      });\r\n    },\r\n    [showTooltip, stockValueScale, dateScale, stockTimeSeries]\r\n  );\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <svg width={width} height={height}>\r\n        <rect x={0} y={0} width={width} height={height} fill=\"url(#area-background-gradient)\" rx={14} />\r\n        <LinearGradient id=\"area-background-gradient\" from={styles.background.dark} to={styles.background.darker} />\r\n        <LinearGradient id=\"area-gradient\" from={styles.accent.light} to={styles.accent.light} toOpacity={0.1} />\r\n        <GridRows\r\n          scale={stockValueScale}\r\n          width={xMax}\r\n          strokeDasharray=\"3,3\"\r\n          stroke={styles.accent.light}\r\n          strokeOpacity={0.3}\r\n          pointerEvents=\"none\"\r\n        />\r\n        <GridColumns\r\n          scale={dateScale}\r\n          height={yMax}\r\n          strokeDasharray=\"3,3\"\r\n          stroke={styles.accent.light}\r\n          strokeOpacity={0.3}\r\n          pointerEvents=\"none\"\r\n        />\r\n        <AreaClosed<NormalizedTimeSeriesItem>\r\n          data={stockTimeSeries}\r\n          x={d => dateScale(getDate(d))}\r\n          y={d => stockValueScale(getStockHighValue(d))}\r\n          yScale={stockValueScale}\r\n          strokeWidth={1}\r\n          stroke=\"url(#area-gradient)\"\r\n          fill=\"url(#area-gradient)\"\r\n          curve={curveMonotoneX}\r\n        />\r\n        {showAverage && (\r\n          <LinePath\r\n            stroke={theme.colors.orange[500]}\r\n            strokeWidth={1.5}\r\n            data={stockTimeSeries}\r\n            x={d => dateScale(getDate(d))}\r\n            y={d => stockValueScale(getStockAverageValue(d))}\r\n            curve={curveMonotoneX}\r\n          />\r\n        )}\r\n        <Bar\r\n          x={0}\r\n          y={0}\r\n          width={width}\r\n          height={height}\r\n          fill=\"transparent\"\r\n          rx={14}\r\n          onMouseMove={handleTooltip}\r\n          onMouseLeave={() => hideTooltip()}\r\n        />\r\n        {tooltipData && tooltipTop && (\r\n          <g>\r\n            <Line\r\n              from={{ x: tooltipLeft, y: 0 }}\r\n              to={{ x: tooltipLeft, y: yMax }}\r\n              stroke={styles.accent.dark}\r\n              strokeWidth={2}\r\n              pointerEvents=\"none\"\r\n              strokeDasharray=\"5,2\"\r\n            />\r\n            <circle\r\n              cx={tooltipLeft}\r\n              cy={tooltipTop + 1}\r\n              r={4}\r\n              fill=\"black\"\r\n              fillOpacity={0.1}\r\n              stroke=\"black\"\r\n              strokeOpacity={0.1}\r\n              strokeWidth={2}\r\n              pointerEvents=\"none\"\r\n            />\r\n            <circle\r\n              cx={tooltipLeft}\r\n              cy={tooltipTop}\r\n              r={4}\r\n              fill={styles.accent.dark}\r\n              stroke=\"white\"\r\n              strokeWidth={2}\r\n              pointerEvents=\"none\"\r\n            />\r\n          </g>\r\n        )}\r\n      </svg>\r\n      {tooltipData && tooltipTop && tooltipLeft && (\r\n        <div>\r\n          <Tooltip top={tooltipTop - 12} left={tooltipLeft + 12} style={tooltipHighStyles}>\r\n            {`$${getStockHighValue(tooltipData)}`}\r\n          </Tooltip>\r\n          {showAverage && (\r\n            <Tooltip top={tooltipTop + 25} left={tooltipLeft + 12} style={tooltipAverageStyles}>\r\n              Average: {`$${getStockAverageValue(tooltipData)}`}\r\n            </Tooltip>\r\n          )}\r\n          <Tooltip\r\n            top={yMax + 15}\r\n            left={tooltipLeft}\r\n            style={{\r\n              ...defaultStyles,\r\n              minWidth: 72,\r\n              textAlign: \"center\",\r\n              transform: \"translateX(-50%)\",\r\n            }}\r\n          >\r\n            {formatDate(getDate(tooltipData))}\r\n          </Tooltip>\r\n        </div>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default StockChart;\r\n","import * as React from \"react\";\r\nimport { Button, chakra, FormControl, FormHelperText, FormLabel, Stack, Switch } from \"@chakra-ui/react\";\r\nimport { DateRange } from \"react-date-range\";\r\n\r\nimport { DateInterval } from \"./StockTimeSeries\";\r\n\r\nconst ChakraDateRange = chakra(DateRange);\r\n\r\ntype FilterStockTimeSeriesProps = {\r\n  setFilterInterval: (newFilterInterval: { start: Date; end: Date }) => void;\r\n  setShowAverage: (newShowAverage: boolean) => void;\r\n  minDate: string;\r\n  maxDate: string;\r\n};\r\n\r\nconst FilterStockTimeSeries = (props: FilterStockTimeSeriesProps) => {\r\n  const { setFilterInterval, setShowAverage, minDate, maxDate } = props;\r\n\r\n  const [dateRange, setDateRange] = React.useState<DateInterval[]>([\r\n    {\r\n      key: \"selection\",\r\n      startDate: undefined,\r\n      endDate: undefined,\r\n    },\r\n  ]);\r\n\r\n  function handleDateIntervalChange(item: any) {\r\n    setDateRange([item.selection]);\r\n  }\r\n\r\n  function handleSwitchChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setShowAverage(event.target.checked);\r\n  }\r\n\r\n  function handleFilter() {\r\n    setFilterInterval({\r\n      //@ts-ignore\r\n      start: dateRange[0].startDate,\r\n      //@ts-ignore\r\n      end: dateRange[0].endDate,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Stack spacing={3} gridColumn=\"3 / span 1\">\r\n      <FormControl>\r\n        <FormLabel fontSize=\"lg\">Date interval for stock time series</FormLabel>\r\n        <ChakraDateRange\r\n          minDate={new Date(minDate)}\r\n          maxDate={new Date(maxDate)}\r\n          startDatePlaceholder=\"Start date\"\r\n          endDatePlaceholder=\"End date\"\r\n          ranges={dateRange}\r\n          moveRangeOnFirstSelection={false}\r\n          weekStartsOn={1}\r\n          dateDisplayFormat=\"d MMM, yyyy\"\r\n          onChange={handleDateIntervalChange}\r\n          w=\"100%\"\r\n        />\r\n        <FormHelperText fontSize=\"md\">Select start &amp; end dates in order to filter the stock data</FormHelperText>\r\n      </FormControl>\r\n      <FormControl display=\"flex\" alignItems=\"center\">\r\n        <FormLabel htmlFor=\"average-stock-value\" mb=\"0\">\r\n          Show average stock value\r\n        </FormLabel>\r\n        <Switch id=\"average-stock-value\" onChange={handleSwitchChange} />\r\n      </FormControl>\r\n      <Button type=\"submit\" colorScheme=\"blue\" variant=\"outline\" onClick={handleFilter}>\r\n        Filter\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default FilterStockTimeSeries;\r\n","import * as React from \"react\";\r\nimport { Box, CircularProgress, Stack, theme } from \"@chakra-ui/react\";\r\n\r\nfunction StockTimeSeriesLoader() {\r\n  return (\r\n    <Stack gridColumn=\"2 / span 2\" gridRow=\"1 / -1\" justifySelf=\"center\" alignSelf=\"center\">\r\n      <Box as=\"p\">Loading company data...</Box>\r\n      <CircularProgress isIndeterminate size=\"3xs\" color={theme.colors.teal[500]} />\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default StockTimeSeriesLoader;\r\n","import * as React from \"react\";\r\nimport { Stack, chakra, Tag, TagLabel, HStack } from \"@chakra-ui/react\";\r\nimport { Range } from \"react-date-range\";\r\n\r\nimport StockChart from \"./StockChart\";\r\nimport FilterStockTimeSeries from \"./FilterStockTimeSeries\";\r\nimport StockTimeSeriesLoader from \"./StockTimeSeriesLoader\";\r\n\r\nimport { filterTimeSeries, NormalizedTimeSeries, normalizeStockData } from \"../utils/daily-stock-time-series\";\r\nimport { extent } from \"d3-array\";\r\n\r\nexport type DateInterval = {\r\n  key: string;\r\n} & Range;\r\n\r\ntype StockTimeSeriesProps = {\r\n  query: string;\r\n  shouldFetchDailyStockTimeSeries: boolean;\r\n  setShouldFetchDailyStockTimeSeries: (shouldFetchDailyStockTimeSeries: boolean) => void;\r\n};\r\n\r\nfunction StockTimeSeries(props: StockTimeSeriesProps) {\r\n  const { query, shouldFetchDailyStockTimeSeries, setShouldFetchDailyStockTimeSeries } = props;\r\n\r\n  const [fullStockTimeSeries, setFullStockTimeSeries] = React.useState<NormalizedTimeSeries>();\r\n  const [showAverage, setShowAverage] = React.useState(false);\r\n  const [filtered, setFiltered] = React.useState<NormalizedTimeSeries>();\r\n  const [filterInterval, setFilterInterval] = React.useState<{ start: Date; end: Date }>();\r\n  const [minDate, setMinDate] = React.useState(\"\");\r\n  const [maxDate, setMaxDate] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (shouldFetchDailyStockTimeSeries) {\r\n      fetchDailyStockTimeSeries();\r\n    }\r\n\r\n    /* ******************************** */\r\n    async function fetchDailyStockTimeSeries() {\r\n      try {\r\n        setIsLoading(true);\r\n        const apiKey = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY;\r\n        let response = await fetch(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${query}&outputsize=full&apikey=${apiKey}`\r\n        );\r\n        let stockTimeSeries = await response.json();\r\n\r\n        if (stockTimeSeries) {\r\n          let normalizedData = normalizeStockData(stockTimeSeries);\r\n          let [min, max] = extent(normalizedData, dataPoint => dataPoint.date);\r\n\r\n          setMinDate(min!);\r\n          setMaxDate(max!);\r\n\r\n          setFullStockTimeSeries(normalizedData);\r\n          setShouldFetchDailyStockTimeSeries(false);\r\n          setIsLoading(false);\r\n        } else {\r\n          throw new Error(\"There is no data for the selected company 😕\");\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n  }, [shouldFetchDailyStockTimeSeries]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (filterInterval?.start && filterInterval?.end && fullStockTimeSeries) {\r\n      let filteredTimeSeries = filterTimeSeries(fullStockTimeSeries, filterInterval);\r\n\r\n      setFiltered(filteredTimeSeries);\r\n    }\r\n  }, [filterInterval, fullStockTimeSeries]);\r\n\r\n  return isLoading ? (\r\n    <StockTimeSeriesLoader />\r\n  ) : fullStockTimeSeries ? (\r\n    <HStack spacing=\"10em\">\r\n      <Stack spacing={3} gridColumn=\"2 / span 1\">\r\n        <chakra.p>\r\n          Stock data available between{\" \"}\r\n          <Tag size=\"lg\" variant=\"solid\" fontSize=\"md\">\r\n            <TagLabel>{minDate}</TagLabel>\r\n          </Tag>{\" \"}\r\n          and{\" \"}\r\n          <Tag size=\"lg\" variant=\"solid\" fontSize=\"md\">\r\n            <TagLabel>{maxDate}</TagLabel>\r\n          </Tag>\r\n        </chakra.p>\r\n        <StockChart\r\n          width={800}\r\n          height={480}\r\n          stockTimeSeries={filtered ?? fullStockTimeSeries}\r\n          showAverage={showAverage}\r\n        />\r\n      </Stack>\r\n\r\n      <FilterStockTimeSeries\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        setFilterInterval={setFilterInterval}\r\n        setShowAverage={setShowAverage}\r\n      />\r\n    </HStack>\r\n  ) : (\r\n    <chakra.p\r\n      gridColumn=\"2 / -2\"\r\n      gridRow=\"1 / span 3\"\r\n      fontSize=\"3xl\"\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      Search for a company to load its stock data. Afterwards you can filter it using the calendar.\r\n    </chakra.p>\r\n  );\r\n}\r\n\r\nexport default StockTimeSeries;\r\n","import * as React from \"react\";\r\nimport { ChakraProvider, Box, Grid, extendTheme, Flex } from \"@chakra-ui/react\";\r\n\r\nimport Header from \"./Header\";\r\nimport StockTimeSeries from \"./StockTimeSeries\";\r\n\r\nconst theme = extendTheme({\r\n  initialColorMode: \"dark\",\r\n  styles: {\r\n    global: {\r\n      \"html, body, #root\": {\r\n        height: \"100%\",\r\n      },\r\n      \".rdrMonth\": {\r\n        alignSelf: \"center\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport function App() {\r\n  const [query, setQuery] = React.useState(\"\");\r\n  const [shouldFetchDailyStockTimeSeries, setShouldFetchDailyStockTimeSeries] = React.useState(false);\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <Grid h=\"100%\" templateRows=\"auto 1fr auto\">\r\n        <Header\r\n          query={query}\r\n          setQuery={setQuery}\r\n          setShouldFetchDailyStockTimeSeries={setShouldFetchDailyStockTimeSeries}\r\n        />\r\n        <Flex as=\"main\" fontSize=\"xl\" justifyContent=\"center\" alignItems=\"center\">\r\n          <StockTimeSeries\r\n            query={query}\r\n            shouldFetchDailyStockTimeSeries={shouldFetchDailyStockTimeSeries}\r\n            setShouldFetchDailyStockTimeSeries={setShouldFetchDailyStockTimeSeries}\r\n          />\r\n        </Flex>\r\n        <Box as=\"footer\" p={5} fontSize=\"xl\" textAlign=\"center\">\r\n          <p>\r\n            Made with{\" \"}\r\n            <span role=\"img\" aria-labelledby=\"Heart\">\r\n              💖\r\n            </span>{\" \"}\r\n            by Răzvan Sbîngu\r\n          </p>\r\n        </Box>\r\n      </Grid>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ColorModeScript } from \"@chakra-ui/react\";\r\n\r\nimport { App } from \"./components/App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript initialColorMode=\"dark\" />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}