{"version":3,"sources":["components/AppContext.ts","components/Logo.tsx","components/Suggestion.tsx","components/SuggestionsList.tsx","services/getSuggestions.ts","utils/suggestions.ts","components/Search.tsx","services/getDailyStockTimeSeries.ts","utils/daily-stock-time-series.ts","components/Header.tsx","components/StockChart.tsx","components/FilterStockTimeSeries.tsx","components/StockTimeSeriesLoader.tsx","components/StockTimeSeries.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["AppActions","Logo","as","size","mb","colorScheme","fontSize","lineHeight","alignItems","display","borderTopRightRadius","borderBottomRightRadius","marginLeft","borderTopLeftRadius","borderBottomLeftRadius","marginRight","Suggestion","setQuery","suggestion","setIsStockSymbolSet","cursor","onClick","borderBottom","_hover","borderBottomColor","theme","colors","gray","SuggestionsList","suggestions","maxHeight","overflowY","w","initialScale","in","length","map","SuggestionKeys","AppContext","React","company","symbol","name","shouldFetchStockData","dispatch","getSuggestions","searchQuery","a","process","fetch","toLowerCase","response","json","Error","normalizeSuggestions","bestMatches","keepOnlyCompanyAndSymbolName","SYMBOL","NAME","DailyStockTimeSeriesItemValuesKeys","StockAPIResponseKeys","NormalizedTimeSeriesItemValuesKeys","Search","closeModal","inputRef","query","isLoading","setIsLoading","setSuggestions","isStockSymbolSet","typingTimeout","setTypingTimeout","form","flex","autoComplete","position","onSubmit","event","preventDefault","type","SHOULD_FETCH_STOCK_DATA","payload","SET_COMPANY","split","zIndex","zIndices","dropdown","spacing","required","ref","variant","onChange","value","target","clearTimeout","setTimeout","fetchSuggestions","placeholder","disabled","Header","searchInputRef","useDisclosure","isOpen","onOpen","onClose","onToggle","p","direction","rightIcon","motionPreset","initialFocusRef","getDailyStockTimeSeries","normalizeStockData","stockAPIResponse","timeSeries","Object","entries","TIME_SERIES_DAILY","timeSeriesItem","high","Number","parseFloat","HIGH","low","LOW","average","toFixed","values","date","sort","item1","item2","getDate","dataPoint","Date","getStockHighValue","getStockAverageValue","bisectDate","bisector","left","formatDate","timeFormat","styles","dark","light","darker","tooltipHighStyles","defaultStyles","color","border","background","tooltipAverageStyles","orange","StockChart","width","height","margin","showAverage","stockTimeSeries","useTooltip","showTooltip","hideTooltip","tooltipData","tooltipLeft","tooltipTop","xMax","right","yMax","top","bottom","dateScale","scaleTime","range","domain","extent","stockValueScale","scaleLinear","nice","max","handleTooltip","x","localPoint","x0","invert","index","d0","d1","d","valueOf","y","rx","fill","LinearGradient","id","from","to","toOpacity","GridRows","strokeOpacity","pointerEvents","strokeDasharray","scale","stroke","GridColumns","AreaClosed","strokeWidth","data","curve","curveMonotoneX","yScale","LinePath","Bar","onMouseMove","onMouseLeave","Line","r","cx","fillOpacity","cy","Tooltip","style","minWidth","textAlign","transform","ChakraDateRange","chakra","DateRange","FilterStockTimeSeries","minDate","maxDate","setShowAverage","setFilterInterval","key","startDate","endDate","dateRange","setDateRange","gridColumn","weekStartsOn","ranges","endDatePlaceholder","dateDisplayFormat","startDatePlaceholder","moveRangeOnFirstSelection","item","selection","htmlFor","checked","start","end","StockTimeSeriesLoader","gridRow","alignSelf","justifySelf","isIndeterminate","teal","StockTimeSeries","setMinDate","setMaxDate","filtered","setFiltered","filterInterval","fullStockTimeSeries","setFullStockTimeSeries","normalizedData","min","fetchDailyStockTimeSeries","filteredTimeSeries","startStringDate","toISOString","endStringDate","filter","filterTimeSeries","useTheme","fontWeight","blue","justifyContent","extendTheme","initialColorMode","global","reducer","state","action","App","h","templateRows","Provider","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.845afe49.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport type TCompany = {\r\n  name: string;\r\n  symbol: string;\r\n};\r\n\r\nexport interface IAppState {\r\n  company: TCompany;\r\n  shouldFetchStockData: boolean;\r\n}\r\n\r\ninterface IAppContext extends IAppState {\r\n  dispatch: React.Dispatch<TAction>;\r\n}\r\n\r\nexport enum AppActions {\r\n  SET_COMPANY = 'SET_COMPANY',\r\n  SHOULD_FETCH_STOCK_DATA = 'SHOULD_FETCH_STOCK_DATA',\r\n}\r\n\r\nexport type TAction =\r\n  | {\r\n      type: AppActions.SET_COMPANY;\r\n      payload: TCompany;\r\n    }\r\n  | {\r\n      type: AppActions.SHOULD_FETCH_STOCK_DATA;\r\n      payload: boolean;\r\n    };\r\n\r\nexport const AppContext = React.createContext<IAppContext>({\r\n  company: {\r\n    symbol: '',\r\n    name: '',\r\n  },\r\n  shouldFetchStockData: false,\r\n  dispatch: () => undefined,\r\n});\r\n","import * as React from 'react';\r\nimport { Heading, Badge, Box } from '@chakra-ui/react';\r\nimport { FaArrowDown, FaArrowUp } from 'react-icons/fa';\r\n\r\nexport const Logo: React.FC = () => (\r\n  <Heading as=\"h1\" size=\"lg\" mb={4}>\r\n    <Badge\r\n      colorScheme=\"red\"\r\n      fontSize=\"inherit\"\r\n      lineHeight=\"short\"\r\n      alignItems=\"center\"\r\n      display=\"inline-flex\"\r\n      borderTopRightRadius={0}\r\n      borderBottomRightRadius={0}\r\n    >\r\n      <FaArrowDown />\r\n      <Box as=\"span\" marginLeft=\"2\">\r\n        st\r\n      </Box>\r\n    </Badge>\r\n    <Badge\r\n      fontSize=\"inherit\"\r\n      lineHeight=\"short\"\r\n      alignItems=\"center\"\r\n      colorScheme=\"green\"\r\n      display=\"inline-flex\"\r\n      borderTopLeftRadius={0}\r\n      borderBottomLeftRadius={0}\r\n    >\r\n      <Box as=\"span\" marginRight={2}>\r\n        okk\r\n      </Box>\r\n      <FaArrowUp />\r\n    </Badge>\r\n  </Heading>\r\n);\r\n","import * as React from 'react';\r\nimport { Box, theme } from '@chakra-ui/react';\r\n\r\ninterface IProps {\r\n  suggestion: string;\r\n  setQuery: (value: string) => void;\r\n  setIsStockSymbolSet: (value: boolean) => void;\r\n}\r\n\r\nconst Suggestion: React.FC<IProps> = ({\r\n  setQuery,\r\n  suggestion,\r\n  setIsStockSymbolSet,\r\n}) => (\r\n  <Box\r\n    as=\"p\"\r\n    cursor=\"pointer\"\r\n    onClick={() => {\r\n      setQuery(suggestion);\r\n      setIsStockSymbolSet(true);\r\n    }}\r\n    borderBottom=\"1px solid transparent\"\r\n    _hover={{ borderBottomColor: theme.colors.gray[100] }}\r\n  >\r\n    {suggestion}\r\n  </Box>\r\n);\r\n\r\nexport default Suggestion;\r\n","import * as React from 'react';\r\nimport { Box, VStack, ScaleFade } from '@chakra-ui/react';\r\n\r\nimport Suggestion from './Suggestion';\r\n\r\ninterface IProps {\r\n  suggestions: string[];\r\n  setQuery: (value: string) => void;\r\n  setIsStockSymbolSet: (value: boolean) => void;\r\n}\r\n\r\nconst SuggestionsList: React.FC<IProps> = ({\r\n  setQuery,\r\n  suggestions,\r\n  setIsStockSymbolSet,\r\n}) => (\r\n  <VStack alignItems=\"start\" maxHeight=\"10em\" overflowY=\"auto\">\r\n    <Box w=\"100%\">\r\n      <ScaleFade initialScale={0.9} in={suggestions.length > 0}>\r\n        {suggestions.map((suggestion) => (\r\n          <Suggestion\r\n            key={suggestion}\r\n            setQuery={setQuery}\r\n            suggestion={suggestion}\r\n            setIsStockSymbolSet={setIsStockSymbolSet}\r\n          />\r\n        ))}\r\n      </ScaleFade>\r\n    </Box>\r\n  </VStack>\r\n);\r\n\r\nexport default SuggestionsList;\r\n","export enum SuggestionKeys {\r\n  SYMBOL = \"1. symbol\",\r\n  NAME = \"2. name\",\r\n}\r\n\r\nexport type Suggestion = {\r\n  [key in SuggestionKeys]: string;\r\n};\r\n\r\nexport interface Suggestions {\r\n  bestMatches: Suggestion[];\r\n}\r\n\r\nexport async function getSuggestions(searchQuery: string): Promise<Suggestions> {\r\n  try {\r\n    const apiKey = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY;\r\n    let response = await fetch(\r\n      `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchQuery.toLowerCase()}&apikey=${apiKey}`\r\n    );\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    throw new Error(err);\r\n  }\r\n}\r\n","import {\r\n  Suggestion,\r\n  Suggestions,\r\n  SuggestionKeys,\r\n} from '../services/getSuggestions';\r\n\r\nexport function normalizeSuggestions(suggestions: Suggestions) {\r\n  return suggestions.bestMatches.map(keepOnlyCompanyAndSymbolName);\r\n}\r\n\r\nfunction keepOnlyCompanyAndSymbolName(suggestion: Suggestion) {\r\n  return `${suggestion[SuggestionKeys.SYMBOL]} - ${\r\n    suggestion[SuggestionKeys.NAME]\r\n  }`;\r\n}\r\n","import {\r\n  Input,\r\n  Stack,\r\n  theme,\r\n  chakra,\r\n  Button,\r\n  FormControl,\r\n  FormHelperText,\r\n} from '@chakra-ui/react';\r\nimport * as React from 'react';\r\n\r\nimport SuggestionsList from './SuggestionsList';\r\nimport { AppContext, AppActions } from './AppContext';\r\nimport { getSuggestions } from '../services/getSuggestions';\r\nimport { normalizeSuggestions } from '../utils/suggestions';\r\n\r\ninterface SearchProps {\r\n  closeModal: () => void;\r\n  inputRef: React.Ref<HTMLInputElement>;\r\n}\r\n\r\nexport const Search: React.FC<SearchProps> = ({ closeModal, inputRef }) => {\r\n  const { dispatch } = React.useContext(AppContext);\r\n\r\n  const [query, setQuery] = React.useState('');\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [suggestions, setSuggestions] = React.useState<string[]>();\r\n  const [isStockSymbolSet, setIsStockSymbolSet] = React.useState(false);\r\n  const [typingTimeout, setTypingTimeout] = React.useState<NodeJS.Timeout>();\r\n\r\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const { value } = event.target;\r\n\r\n    if (typingTimeout) {\r\n      clearTimeout(typingTimeout);\r\n    }\r\n\r\n    if (value.length > 1) {\r\n      setTypingTimeout(setTimeout(() => fetchSuggestions(value), 1250));\r\n    }\r\n\r\n    setQuery(value);\r\n    setIsStockSymbolSet(false);\r\n  }\r\n\r\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n\r\n    dispatch({\r\n      type: AppActions.SHOULD_FETCH_STOCK_DATA,\r\n      payload: true,\r\n    });\r\n\r\n    dispatch({\r\n      type: AppActions.SET_COMPANY,\r\n      payload: {\r\n        symbol: query.split(' - ')[0],\r\n        name: query.split(' - ')[1],\r\n      },\r\n    });\r\n\r\n    closeModal();\r\n  }\r\n\r\n  async function fetchSuggestions(searchQuery: string) {\r\n    setIsLoading(true);\r\n\r\n    const suggestions = await getSuggestions(searchQuery);\r\n\r\n    setSuggestions(normalizeSuggestions(suggestions));\r\n    setIsLoading(false);\r\n  }\r\n\r\n  return (\r\n    <chakra.form\r\n      flex=\"0 0 25%\"\r\n      autoComplete=\"off\"\r\n      position=\"relative\"\r\n      onSubmit={handleSubmit}\r\n      zIndex={theme.zIndices.dropdown}\r\n    >\r\n      <Stack spacing={3}>\r\n        <Stack spacing={0}>\r\n          <FormControl mb={2}>\r\n            <Input\r\n              required\r\n              type=\"text\"\r\n              ref={inputRef}\r\n              variant=\"flushed\"\r\n              name=\"searchQuery\"\r\n              onChange={handleChange}\r\n              value={query.split(' - ')[0]}\r\n              placeholder=\"e.g. GOOGL/Google\"\r\n            />\r\n            <FormHelperText>\r\n              Type the name of a stock symbol/company &amp; click on any of the\r\n              suggestions\r\n            </FormHelperText>\r\n          </FormControl>\r\n          {suggestions && suggestions?.length > 0 ? (\r\n            <SuggestionsList\r\n              setQuery={setQuery}\r\n              suggestions={suggestions}\r\n              setIsStockSymbolSet={setIsStockSymbolSet}\r\n            />\r\n          ) : null}\r\n        </Stack>\r\n        <Button\r\n          type=\"submit\"\r\n          isLoading={isLoading}\r\n          disabled={!isStockSymbolSet}\r\n        >\r\n          Load stock data for selected company\r\n        </Button>\r\n      </Stack>\r\n    </chakra.form>\r\n  );\r\n};\r\n","export enum DailyStockTimeSeriesItemValuesKeys {\r\n  HIGH = '2. high',\r\n  LOW = '3. low',\r\n}\r\n\r\nexport type DailyStockTimeSeriesItemValues = {\r\n  [key in DailyStockTimeSeriesItemValuesKeys]: string;\r\n};\r\n\r\nexport enum StockAPIResponseKeys {\r\n  TIME_SERIES_DAILY = 'Time Series (Daily)',\r\n}\r\n\r\ntype DailyStockTimeSeries = {\r\n  [dateString: string]: DailyStockTimeSeriesItemValues;\r\n};\r\n\r\nexport type StockAPIResponse = {\r\n  [key in StockAPIResponseKeys]: DailyStockTimeSeries;\r\n};\r\n\r\nexport async function getDailyStockTimeSeries(searchQuery: string) {\r\n  try {\r\n    const apiKey = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY;\r\n    let response = await fetch(\r\n      `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${searchQuery}&outputsize=full&apikey=${apiKey}`\r\n    );\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    throw new Error(err);\r\n  }\r\n}\r\n","import { bisector } from 'd3-array';\r\nimport { timeFormat } from 'd3-time-format';\r\n\r\nimport {\r\n  StockAPIResponse,\r\n  StockAPIResponseKeys,\r\n  DailyStockTimeSeriesItemValues,\r\n  DailyStockTimeSeriesItemValuesKeys,\r\n} from '../services/getDailyStockTimeSeries';\r\n\r\nenum NormalizedTimeSeriesItemValuesKeys {\r\n  LOW = 'low',\r\n  HIGH = 'high',\r\n  AVERAGE = 'average',\r\n}\r\n\r\ntype NormalizedTimeSeriesItemValues = {\r\n  [key in NormalizedTimeSeriesItemValuesKeys]: number;\r\n};\r\n\r\nexport type NormalizedTimeSeriesItem = {\r\n  date: string;\r\n  values: NormalizedTimeSeriesItemValues;\r\n};\r\n\r\nexport type NormalizedTimeSeries = NormalizedTimeSeriesItem[];\r\n\r\nexport function normalizeStockData(\r\n  stockAPIResponse: StockAPIResponse\r\n): NormalizedTimeSeries {\r\n  var timeSeries = Object.entries(\r\n    stockAPIResponse[StockAPIResponseKeys.TIME_SERIES_DAILY]\r\n  );\r\n\r\n  if (timeSeries) {\r\n    return timeSeries\r\n      .map(keepOnlyHighLowAverageValues)\r\n      .sort((item1, item2) => (item1.date > item2.date ? 1 : -1));\r\n  } else {\r\n    throw new Error('There is no data for the selected company 😕');\r\n  }\r\n\r\n  function keepOnlyHighLowAverageValues(\r\n    timeSeriesItem: [string, DailyStockTimeSeriesItemValues]\r\n  ) {\r\n    const high = Number.parseFloat(\r\n      timeSeriesItem[1][DailyStockTimeSeriesItemValuesKeys.HIGH]\r\n    );\r\n    const low = Number.parseFloat(\r\n      timeSeriesItem[1][DailyStockTimeSeriesItemValuesKeys.LOW]\r\n    );\r\n    const average = +((high + low) / 2).toFixed(3);\r\n\r\n    return {\r\n      values: {\r\n        low,\r\n        high,\r\n        average,\r\n      },\r\n      date: timeSeriesItem[0],\r\n    };\r\n  }\r\n}\r\n\r\nexport function filterTimeSeries(\r\n  normalizedData: NormalizedTimeSeries,\r\n  dateRange: { start: Date; end: Date }\r\n) {\r\n  const startStringDate = dateRange.start.toISOString().split('T')[0];\r\n  const endStringDate = dateRange.end.toISOString().split('T')[0];\r\n\r\n  return normalizedData.filter(\r\n    (item) => item.date >= startStringDate && item.date <= endStringDate\r\n  );\r\n}\r\n\r\nexport const getDate = (dataPoint: NormalizedTimeSeriesItem) =>\r\n  new Date(dataPoint.date);\r\nexport const getStockHighValue = (dataPoint: NormalizedTimeSeriesItem) =>\r\n  dataPoint.values.high;\r\nexport const getStockAverageValue = (dataPoint: NormalizedTimeSeriesItem) =>\r\n  dataPoint.values.average;\r\nexport const bisectDate = bisector<NormalizedTimeSeriesItem, Date>(\r\n  (dataPoint) => new Date(dataPoint.date)\r\n).left;\r\nexport const formatDate = timeFormat(\"%b %d, '%y\");\r\n","import {\r\n  Flex,\r\n  Modal,\r\n  Button,\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  useDisclosure,\r\n  ModalCloseButton,\r\n} from '@chakra-ui/react';\r\nimport * as React from 'react';\r\nimport { FaSearch } from 'react-icons/fa';\r\n\r\nimport { Logo } from './Logo';\r\nimport { Search } from './Search';\r\n\r\nexport const Header: React.FC = () => {\r\n  const searchInputRef = React.useRef(null);\r\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure();\r\n\r\n  return (\r\n    <Flex\r\n      p={5}\r\n      as=\"header\"\r\n      fontSize=\"2xl\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Logo />\r\n      <Button\r\n        size=\"md\"\r\n        fontSize=\"xl\"\r\n        onClick={onOpen}\r\n        variant=\"outline\"\r\n        colorScheme=\"blue\"\r\n        rightIcon={<FaSearch />}\r\n      >\r\n        Search\r\n      </Button>\r\n      <Modal\r\n        size=\"xl\"\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        motionPreset=\"scale\"\r\n        initialFocusRef={searchInputRef}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Search for a stock symbol/company name</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Search closeModal={onToggle} inputRef={searchInputRef} />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { max, extent } from 'd3-array';\r\nimport { localPoint } from '@visx/event';\r\nimport { curveMonotoneX } from '@visx/curve';\r\nimport { Box, theme } from '@chakra-ui/react';\r\nimport { LinearGradient } from '@visx/gradient';\r\nimport { GridRows, GridColumns } from '@visx/grid';\r\nimport { scaleTime, scaleLinear } from '@visx/scale';\r\nimport { AreaClosed, Line, Bar, LinePath } from '@visx/shape';\r\nimport { useTooltip, Tooltip, defaultStyles } from '@visx/tooltip';\r\n\r\nimport {\r\n  getDate,\r\n  bisectDate,\r\n  formatDate,\r\n  getStockHighValue,\r\n  getStockAverageValue,\r\n  NormalizedTimeSeries,\r\n  NormalizedTimeSeriesItem,\r\n} from '../utils/daily-stock-time-series';\r\n\r\ninterface AreaProps {\r\n  width: number;\r\n  height: number;\r\n  margin?: { top: number; right: number; bottom: number; left: number };\r\n}\r\n\r\ninterface StockChartProps extends AreaProps {\r\n  showAverage: boolean;\r\n  stockTimeSeries: NormalizedTimeSeries;\r\n}\r\n\r\nconst styles = {\r\n  accent: {\r\n    dark: '#75daad',\r\n    light: '#edffea',\r\n  },\r\n  background: {\r\n    dark: '#3b6978',\r\n    darker: '#204051',\r\n  },\r\n};\r\n\r\nconst tooltipHighStyles = {\r\n  ...defaultStyles,\r\n  color: 'white',\r\n  border: '1px solid white',\r\n  background: styles.background.dark,\r\n};\r\n\r\nconst tooltipAverageStyles = {\r\n  ...tooltipHighStyles,\r\n  background: theme.colors.orange[500],\r\n};\r\n\r\nexport const StockChart: React.FC<StockChartProps> = ({\r\n  width,\r\n  height,\r\n  margin,\r\n  showAverage,\r\n  stockTimeSeries,\r\n}) => {\r\n  const { showTooltip, hideTooltip, tooltipData, tooltipLeft, tooltipTop } =\r\n    useTooltip<NormalizedTimeSeriesItem>();\r\n\r\n  const xMax = margin ? width - margin.left - margin.right : width;\r\n  const yMax = margin ? height - margin.top - margin.bottom : height;\r\n\r\n  const dateScale = React.useMemo(\r\n    () =>\r\n      scaleTime({\r\n        range: [0, xMax],\r\n        domain: extent(stockTimeSeries, getDate) as [Date, Date],\r\n      }),\r\n    [xMax, stockTimeSeries]\r\n  );\r\n\r\n  const stockValueScale = React.useMemo(\r\n    () =>\r\n      scaleLinear({\r\n        nice: true,\r\n        range: [yMax, 0],\r\n        domain: [0, (max(stockTimeSeries, getStockHighValue) || 0) + yMax / 3],\r\n      }),\r\n    [yMax, stockTimeSeries]\r\n  );\r\n\r\n  const handleTooltip = React.useCallback(\r\n    (event: React.MouseEvent<SVGRectElement>) => {\r\n      const { x } = localPoint(event) || { x: 0 };\r\n      const x0 = dateScale.invert(x);\r\n      const index = bisectDate(stockTimeSeries, x0, 1);\r\n      const d0 = stockTimeSeries[index - 1];\r\n      const d1 = stockTimeSeries[index];\r\n      let d = d0;\r\n\r\n      if (d1 && getDate(d1)) {\r\n        d =\r\n          x0.valueOf() - getDate(d0).valueOf() >\r\n          getDate(d1).valueOf() - x0.valueOf()\r\n            ? d1\r\n            : d0;\r\n      }\r\n\r\n      showTooltip({\r\n        tooltipData: d,\r\n        tooltipLeft: x,\r\n        tooltipTop: stockValueScale(getStockHighValue(d)),\r\n      });\r\n    },\r\n    [showTooltip, stockValueScale, dateScale, stockTimeSeries]\r\n  );\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <svg width={width} height={height}>\r\n        <rect\r\n          x={0}\r\n          y={0}\r\n          rx={14}\r\n          width={width}\r\n          height={height}\r\n          fill=\"url(#area-background-gradient)\"\r\n        />\r\n        <LinearGradient\r\n          id=\"area-background-gradient\"\r\n          from={styles.background.dark}\r\n          to={styles.background.darker}\r\n        />\r\n        <LinearGradient\r\n          toOpacity={0.1}\r\n          id=\"area-gradient\"\r\n          to={styles.accent.light}\r\n          from={styles.accent.light}\r\n        />\r\n        <GridRows\r\n          width={xMax}\r\n          strokeOpacity={0.3}\r\n          pointerEvents=\"none\"\r\n          strokeDasharray=\"3,3\"\r\n          scale={stockValueScale}\r\n          stroke={styles.accent.light}\r\n        />\r\n        <GridColumns\r\n          height={yMax}\r\n          scale={dateScale}\r\n          strokeOpacity={0.3}\r\n          pointerEvents=\"none\"\r\n          strokeDasharray=\"3,3\"\r\n          stroke={styles.accent.light}\r\n        />\r\n        <AreaClosed<NormalizedTimeSeriesItem>\r\n          strokeWidth={1}\r\n          data={stockTimeSeries}\r\n          curve={curveMonotoneX}\r\n          yScale={stockValueScale}\r\n          fill=\"url(#area-gradient)\"\r\n          stroke=\"url(#area-gradient)\"\r\n          x={(d) => dateScale(getDate(d))}\r\n          y={(d) => stockValueScale(getStockHighValue(d))}\r\n        />\r\n        {showAverage && (\r\n          <LinePath\r\n            strokeWidth={1.5}\r\n            data={stockTimeSeries}\r\n            curve={curveMonotoneX}\r\n            x={(d) => dateScale(getDate(d))}\r\n            stroke={theme.colors.orange[500]}\r\n            y={(d) => stockValueScale(getStockAverageValue(d))}\r\n          />\r\n        )}\r\n        <Bar\r\n          x={0}\r\n          y={0}\r\n          rx={14}\r\n          width={width}\r\n          height={height}\r\n          fill=\"transparent\"\r\n          onMouseMove={handleTooltip}\r\n          onMouseLeave={() => hideTooltip()}\r\n        />\r\n        {tooltipData && tooltipTop && (\r\n          <g>\r\n            <Line\r\n              strokeWidth={2}\r\n              pointerEvents=\"none\"\r\n              strokeDasharray=\"5,2\"\r\n              stroke={styles.accent.dark}\r\n              from={{ x: tooltipLeft, y: 0 }}\r\n              to={{ x: tooltipLeft, y: yMax }}\r\n            />\r\n            <circle\r\n              r={4}\r\n              fill=\"black\"\r\n              stroke=\"black\"\r\n              strokeWidth={2}\r\n              cx={tooltipLeft}\r\n              fillOpacity={0.1}\r\n              cy={tooltipTop + 1}\r\n              strokeOpacity={0.1}\r\n              pointerEvents=\"none\"\r\n            />\r\n            <circle\r\n              r={4}\r\n              stroke=\"white\"\r\n              cy={tooltipTop}\r\n              strokeWidth={2}\r\n              cx={tooltipLeft}\r\n              pointerEvents=\"none\"\r\n              fill={styles.accent.dark}\r\n            />\r\n          </g>\r\n        )}\r\n      </svg>\r\n      {tooltipData && tooltipTop && tooltipLeft && (\r\n        <div>\r\n          <Tooltip\r\n            top={tooltipTop - 12}\r\n            left={tooltipLeft + 12}\r\n            style={tooltipHighStyles}\r\n          >\r\n            {`$${getStockHighValue(tooltipData)}`}\r\n          </Tooltip>\r\n          {showAverage && (\r\n            <Tooltip\r\n              top={tooltipTop + 25}\r\n              left={tooltipLeft + 12}\r\n              style={tooltipAverageStyles}\r\n            >\r\n              Average: {`$${getStockAverageValue(tooltipData)}`}\r\n            </Tooltip>\r\n          )}\r\n          <Tooltip\r\n            top={yMax + 15}\r\n            left={tooltipLeft}\r\n            style={{\r\n              ...defaultStyles,\r\n              minWidth: 72,\r\n              textAlign: 'center',\r\n              transform: 'translateX(-50%)',\r\n            }}\r\n          >\r\n            {formatDate(getDate(tooltipData))}\r\n          </Tooltip>\r\n        </div>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import {\r\n  Stack,\r\n  Switch,\r\n  Button,\r\n  chakra,\r\n  FormLabel,\r\n  FormControl,\r\n  FormHelperText,\r\n} from '@chakra-ui/react';\r\nimport * as React from 'react';\r\nimport { Range, DateRange } from 'react-date-range';\r\n\r\nconst ChakraDateRange = chakra(DateRange);\r\n\r\ntype FilterStockTimeSeriesProps = {\r\n  minDate: string;\r\n  maxDate: string;\r\n  setShowAverage: (newShowAverage: boolean) => void;\r\n  setFilterInterval: (newFilterInterval: { start: Date; end: Date }) => void;\r\n};\r\n\r\nexport const FilterStockTimeSeries: React.FC<FilterStockTimeSeriesProps> = ({\r\n  minDate,\r\n  maxDate,\r\n  setShowAverage,\r\n  setFilterInterval,\r\n}) => {\r\n  const [dateRange, setDateRange] = React.useState<\r\n    Pick<Range, 'key' | 'startDate' | 'endDate'>\r\n  >({\r\n    key: 'selection',\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n  });\r\n\r\n  function handleDateIntervalChange(item: any) {\r\n    setDateRange(item.selection);\r\n  }\r\n\r\n  function handleSwitchChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setShowAverage(event.target.checked);\r\n  }\r\n\r\n  function handleFilter() {\r\n    if (dateRange.startDate && dateRange.endDate) {\r\n      setFilterInterval({\r\n        start: dateRange.startDate,\r\n        end: dateRange.endDate,\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Stack spacing={3} gridColumn=\"3 / span 1\">\r\n      <FormControl>\r\n        <FormLabel fontSize=\"lg\">Date interval for stock time series</FormLabel>\r\n        <ChakraDateRange\r\n          w=\"100%\"\r\n          weekStartsOn={1}\r\n          ranges={[dateRange]}\r\n          minDate={new Date(minDate)}\r\n          maxDate={new Date(maxDate)}\r\n          endDatePlaceholder=\"End date\"\r\n          dateDisplayFormat=\"d MMM, yyyy\"\r\n          startDatePlaceholder=\"Start date\"\r\n          moveRangeOnFirstSelection={false}\r\n          onChange={handleDateIntervalChange}\r\n        />\r\n        <FormHelperText fontSize=\"md\">\r\n          Select start &amp; end dates in order to filter the stock data\r\n        </FormHelperText>\r\n      </FormControl>\r\n      <FormControl display=\"flex\" alignItems=\"center\">\r\n        <FormLabel htmlFor=\"average-stock-value\" mb=\"0\">\r\n          Show average stock value\r\n        </FormLabel>\r\n        <Switch id=\"average-stock-value\" onChange={handleSwitchChange} />\r\n      </FormControl>\r\n      <Button\r\n        type=\"submit\"\r\n        colorScheme=\"blue\"\r\n        variant=\"outline\"\r\n        onClick={handleFilter}\r\n      >\r\n        Filter\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Box, CircularProgress, Stack, theme } from '@chakra-ui/react';\r\n\r\nexport const StockTimeSeriesLoader: React.FC = () => (\r\n  <Stack\r\n    gridRow=\"1 / -1\"\r\n    alignSelf=\"center\"\r\n    justifySelf=\"center\"\r\n    gridColumn=\"2 / span 2\"\r\n  >\r\n    <Box as=\"p\">Loading company data...</Box>\r\n    <CircularProgress\r\n      size=\"3xs\"\r\n      isIndeterminate\r\n      color={theme.colors.teal[500]}\r\n    />\r\n  </Stack>\r\n);\r\n","import * as React from 'react';\r\nimport { extent } from 'd3-array';\r\nimport { Range } from 'react-date-range';\r\nimport { Stack, chakra, HStack, Text, useTheme } from '@chakra-ui/react';\r\n\r\nimport { StockChart } from './StockChart';\r\nimport { AppActions, AppContext } from './AppContext';\r\nimport { FilterStockTimeSeries } from './FilterStockTimeSeries';\r\nimport { StockTimeSeriesLoader } from './StockTimeSeriesLoader';\r\nimport { getDailyStockTimeSeries } from '../services/getDailyStockTimeSeries';\r\n\r\nimport {\r\n  filterTimeSeries,\r\n  normalizeStockData,\r\n  NormalizedTimeSeries,\r\n} from '../utils/daily-stock-time-series';\r\n\r\nexport type DateInterval = {\r\n  key: string;\r\n} & Range;\r\n\r\nexport const StockTimeSeries: React.FC = () => {\r\n  const { company, shouldFetchStockData, dispatch } =\r\n    React.useContext(AppContext);\r\n\r\n  const [minDate, setMinDate] = React.useState('');\r\n  const [maxDate, setMaxDate] = React.useState('');\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [showAverage, setShowAverage] = React.useState(false);\r\n  const [filtered, setFiltered] = React.useState<NormalizedTimeSeries>();\r\n  const [filterInterval, setFilterInterval] =\r\n    React.useState<{ start: Date; end: Date }>();\r\n  const [fullStockTimeSeries, setFullStockTimeSeries] =\r\n    React.useState<NormalizedTimeSeries>();\r\n\r\n  React.useEffect(() => {\r\n    if (shouldFetchStockData) {\r\n      fetchDailyStockTimeSeries();\r\n    }\r\n\r\n    async function fetchDailyStockTimeSeries() {\r\n      setIsLoading(true);\r\n      let stockTimeSeries = await getDailyStockTimeSeries(company.symbol);\r\n\r\n      if (stockTimeSeries) {\r\n        let normalizedData = normalizeStockData(stockTimeSeries);\r\n        let [min, max] = extent(normalizedData, (dataPoint) => dataPoint.date);\r\n\r\n        setMinDate(min ?? '');\r\n        setMaxDate(max ?? '');\r\n\r\n        setFullStockTimeSeries(normalizedData);\r\n\r\n        dispatch({\r\n          type: AppActions.SHOULD_FETCH_STOCK_DATA,\r\n          payload: false,\r\n        });\r\n\r\n        setIsLoading(false);\r\n      } else {\r\n        throw new Error('There is no data for the selected company 😕');\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [shouldFetchStockData]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (filterInterval?.start && filterInterval?.end && fullStockTimeSeries) {\r\n      let filteredTimeSeries = filterTimeSeries(\r\n        fullStockTimeSeries,\r\n        filterInterval\r\n      );\r\n\r\n      setFiltered(filteredTimeSeries);\r\n    }\r\n  }, [filterInterval, fullStockTimeSeries]);\r\n\r\n  const theme = useTheme();\r\n\r\n  return isLoading ? (\r\n    <StockTimeSeriesLoader />\r\n  ) : fullStockTimeSeries ? (\r\n    <HStack spacing=\"10em\">\r\n      <Stack spacing={3} gridColumn=\"2 / span 1\">\r\n        <Text as=\"h3\">\r\n          You're looking at stock data for{' '}\r\n          <Text\r\n            as=\"span\"\r\n            fontSize=\"2xl\"\r\n            fontWeight=\"semibold\"\r\n            color={theme.colors.blue[500]}\r\n          >\r\n            {company.name}\r\n          </Text>{' '}\r\n          between{' '}\r\n          <Text\r\n            as=\"span\"\r\n            fontSize=\"xl\"\r\n            fontWeight=\"semibold\"\r\n            color={theme.colors.blue[500]}\r\n          >\r\n            {minDate}\r\n          </Text>{' '}\r\n          and{' '}\r\n          <Text\r\n            as=\"span\"\r\n            fontSize=\"xl\"\r\n            fontWeight=\"semibold\"\r\n            color={theme.colors.blue[500]}\r\n          >\r\n            {maxDate}\r\n          </Text>\r\n        </Text>\r\n        <StockChart\r\n          width={800}\r\n          height={480}\r\n          showAverage={showAverage}\r\n          stockTimeSeries={filtered ?? fullStockTimeSeries}\r\n        />\r\n      </Stack>\r\n\r\n      <FilterStockTimeSeries\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        setShowAverage={setShowAverage}\r\n        setFilterInterval={setFilterInterval}\r\n      />\r\n    </HStack>\r\n  ) : (\r\n    <chakra.p\r\n      fontSize=\"3xl\"\r\n      display=\"flex\"\r\n      gridColumn=\"2 / -2\"\r\n      alignItems=\"center\"\r\n      gridRow=\"1 / span 3\"\r\n      justifyContent=\"center\"\r\n    >\r\n      Search for a company to load its stock data. Afterwards you can filter it\r\n      using the calendar.\r\n    </chakra.p>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { ChakraProvider, Box, Grid, extendTheme, Flex } from '@chakra-ui/react';\r\n\r\nimport { Header } from './Header';\r\nimport { StockTimeSeries } from './StockTimeSeries';\r\nimport { TAction, AppActions, AppContext, IAppState } from './AppContext';\r\n\r\nconst theme = extendTheme({\r\n  initialColorMode: 'dark',\r\n  styles: {\r\n    global: {\r\n      'html, body, #root': {\r\n        height: '100%',\r\n      },\r\n      '.rdrMonth': {\r\n        alignSelf: 'center',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction reducer(state: IAppState, action: TAction) {\r\n  switch (action.type) {\r\n    case AppActions.SET_COMPANY:\r\n      return { ...state, company: { ...action.payload } };\r\n    case AppActions.SHOULD_FETCH_STOCK_DATA:\r\n      return { ...state, shouldFetchStockData: action.payload };\r\n  }\r\n}\r\n\r\nexport const App: React.FC = () => {\r\n  const [state, dispatch] = React.useReducer(reducer, {\r\n    company: { symbol: '', name: '' },\r\n    shouldFetchStockData: false,\r\n  });\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <Grid h=\"100%\" templateRows=\"auto 1fr auto\">\r\n        <AppContext.Provider\r\n          value={{\r\n            company: state.company,\r\n            shouldFetchStockData: state.shouldFetchStockData,\r\n            dispatch,\r\n          }}\r\n        >\r\n          <Header />\r\n          <Flex\r\n            as=\"main\"\r\n            fontSize=\"xl\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <StockTimeSeries />\r\n          </Flex>\r\n        </AppContext.Provider>\r\n        <Box as=\"footer\" p={5} fontSize=\"xl\" textAlign=\"center\">\r\n          <p>\r\n            Made with{' '}\r\n            <span role=\"img\" aria-labelledby=\"Heart\">\r\n              💖\r\n            </span>{' '}\r\n            by Răzvan Sbîngu\r\n          </p>\r\n        </Box>\r\n      </Grid>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ColorModeScript } from \"@chakra-ui/react\";\r\n\r\nimport { App } from \"./components/App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript initialColorMode=\"dark\" />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}